package com.Internshala.connectfour;


import javafx.animation.TranslateTransition;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Point2D;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.util.Duration;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Controller implements Initializable {

	@FXML
	public GridPane rootGridPane;
	@FXML
	public  Pane insertedDiscPane;
	@FXML
	public  Label playerNameLabel;
	@FXML
	public TextField playerOneName;
	@FXML
	public TextField playerTwoName;
	@FXML
	public Button setNamesButton;

	private static final int COLUMNS=7;
	private static final int ROWS=6;
	private static final int CIRCLE_DIAMETER=80;
	private static final String discColor1="#24303E";
	private static final String discColor2="#CAA88C";
	private static String PLAYER_ONE="Player_One";
	private static String PLAYER_TWO="Player_Two";
	private boolean isPlayerOneTurn=true;
	public Disc[][] insertedDiscArray=new Disc[ROWS][COLUMNS];
	private boolean isAllowedToClick=true;
	private boolean isSetNamesToClick=true;


	public void createPlayground() {
		setNamesButton.setOnAction(event -> {
			String Inp1=playerOneName.getText();
			String Inp2=playerTwoName.getText();
			if(isSetNamesToClick){
				isSetNamesToClick=false;
				PLAYER_ONE=Inp1;
				PLAYER_TWO=Inp2;
				playerOneName.cancelEdit();
				playerTwoName.cancelEdit();
			}
			playerNameLabel.setText(isPlayerOneTurn?PLAYER_ONE:PLAYER_TWO);
		});
		Shape rectWithHoles=createStructurlGrid();
		rootGridPane.add(rectWithHoles,0,1);
		List<Rectangle> rectangleList=createClickableColumns();
		for (Rectangle rectangle:rectangleList) {
			rootGridPane.add(rectangle,0,1);
		}

	}

	public Shape createStructurlGrid(){

		Shape rectWithHoles=new Rectangle((COLUMNS+1)*CIRCLE_DIAMETER,(ROWS+1)*CIRCLE_DIAMETER);

		for (int rows=0;rows<ROWS;rows++)
		{
			for (int col=0;col<COLUMNS;col++)
			{
				Circle circle=new Circle();
				circle.setRadius(CIRCLE_DIAMETER / 2);
				circle.setCenterX(CIRCLE_DIAMETER/ 2);
				circle.setCenterY(CIRCLE_DIAMETER/ 2);
				circle.setTranslateX((col*(CIRCLE_DIAMETER+5))+CIRCLE_DIAMETER/4);
				circle.setTranslateY((rows*(CIRCLE_DIAMETER+5))+CIRCLE_DIAMETER/4);
				circle.setSmooth(true);

				rectWithHoles=Shape.subtract(rectWithHoles,circle);
			}
		}
		rectWithHoles.setFill(Color.WHITE);
		return rectWithHoles;

	}
	private List<Rectangle> createClickableColumns(){

		List<Rectangle> rectangleList=new ArrayList<>();
		for (int col=0;col<COLUMNS;col++){

			Rectangle rectangle=new Rectangle(CIRCLE_DIAMETER,(ROWS+1)*CIRCLE_DIAMETER);
			rectangle.setFill(Color.TRANSPARENT);
			rectangle.setTranslateX((col*(CIRCLE_DIAMETER+5))+(int)(CIRCLE_DIAMETER/4));

			rectangle.setOnMouseEntered(event -> rectangle.setFill(Color.valueOf("#eeeeee26")));
			rectangle.setOnMouseExited(event -> rectangle.setFill(Color.TRANSPARENT));

			final int Column=col;
			rectangle.setOnMouseClicked(event -> {
				if(isAllowedToClick) {
					isAllowedToClick=false;
					insertDisc(new Disc(isPlayerOneTurn), Column);
				}
			});

			rectangleList.add(rectangle);
		}
		return rectangleList;
	}

	private void insertDisc(Disc disc,int column) {
		int row=ROWS-1;
		while(row>=0){
			if(getDiscIfPresent(row,column)==null){
				break;
			}
			row--;
		}
		if (row<0){
			return;
		}
		insertedDiscArray[row][column]=disc;
		insertedDiscPane.getChildren().add(disc);

		disc.setTranslateX(column*(CIRCLE_DIAMETER+5)+(int)(CIRCLE_DIAMETER / 4));

		TranslateTransition translateTransition=new TranslateTransition(Duration.seconds(0.5),disc);
		translateTransition.setToY(row*(CIRCLE_DIAMETER+5)+(int)(CIRCLE_DIAMETER/4));

		int finalRow = row;
		translateTransition.setOnFinished(event -> {
			isAllowedToClick=true;
			if(gameEnded(finalRow,column)){
				gameOver();
				return;
			}

			isPlayerOneTurn = ! isPlayerOneTurn;
			playerNameLabel.setText(isPlayerOneTurn?PLAYER_ONE:PLAYER_TWO);

		});

		translateTransition.play();

	}

	private boolean gameEnded(int rows,int column){

		//Vertical Points
		List<Point2D>verticalPoints=IntStream.rangeClosed(rows-3 , rows+3).
				mapToObj(r->new Point2D(r,column)).
				collect(Collectors.toList());
		//Horizantal points
		List<Point2D>horizantalPoints=IntStream.rangeClosed(column-3,column+3).
				mapToObj(c->new Point2D(rows,c)).
				collect(Collectors.toList());
		Point2D startPoint1=new Point2D(rows-3,column+3);
		//DiagnolPoints-1
		List<Point2D>diagnolPoint1=IntStream.rangeClosed(0,6)
				.mapToObj(i->startPoint1.add(i,-i))
				.collect(Collectors.toList());
		Point2D startPoint2=new Point2D(rows-3,column-3);
		//DiagnolPoints-2
		List<Point2D>diagnalPoint2=IntStream.rangeClosed(0,6)
				.mapToObj(i->startPoint2.add(i,i))
				.collect(Collectors.toList());

		boolean isEnded=checkCombinations(verticalPoints)||checkCombinations(horizantalPoints)||checkCombinations(diagnolPoint1)||checkCombinations(diagnalPoint2);

		return isEnded;


	}

	private void gameOver() {
		String winner=isPlayerOneTurn ? PLAYER_ONE : PLAYER_TWO;
		System.out.println("the winner is "+winner);
		Alert alert=new Alert(Alert.AlertType.INFORMATION);
		alert.setTitle("Connect 4");
		alert.setHeaderText("The Winner is "+winner);
		alert.setContentText("Want to play again ?");

		ButtonType yesbtn=new ButtonType("Yes");
		ButtonType nobtn=new ButtonType("No,Exit");
		alert.getButtonTypes().setAll(yesbtn,nobtn);
		Platform.runLater(()->{
			Optional<ButtonType>btnClicked=alert.showAndWait();
			if(btnClicked.isPresent() && btnClicked.get() == yesbtn){
				resetGame();
			}else{
				Platform.exit();
				System.exit(0);
			}
		});

	}

	public void resetGame() {
		insertedDiscPane.getChildren().clear();
		for(int row=0;row< insertedDiscArray.length;row++){
			for (int col=0;col<insertedDiscArray[row].length;col++){
				insertedDiscArray[row][col]=null;
			}
		}
		isSetNamesToClick=true;
		PLAYER_ONE="Player One";
		PLAYER_TWO="Player Two";
		playerOneName.clear();
		playerTwoName.clear();
		isPlayerOneTurn=true;
		playerNameLabel.setText(PLAYER_ONE);
		createPlayground();
	}

	private boolean checkCombinations(List<Point2D> points) {
		int chain=0;
		for (Point2D point:points) {
			int rowIndexForArray= (int) point.getX();
			int colIndexForArray = (int) point.getY();

			Disc disc=getDiscIfPresent(rowIndexForArray,colIndexForArray);

			if(disc != null && disc.isPlayerOneMove==isPlayerOneTurn){
				chain++;
				if(chain==4){
					return true;
				}
			}else {
				chain=0;
			}
		}
		return false;
	}
	private Disc getDiscIfPresent(int row,int column){
		if(row>=ROWS||row<0||column>=COLUMNS||column<0){
			return null;
		}
		return insertedDiscArray[row][column];
	}

	private static class Disc extends Circle{

		private final boolean isPlayerOneMove;

		public Disc(boolean isPlayerOneMove){
			this.isPlayerOneMove=isPlayerOneMove;
			setRadius(CIRCLE_DIAMETER/2);
			setFill(isPlayerOneMove? Color.valueOf(discColor1) : Color.valueOf(discColor2));
			setCenterX(CIRCLE_DIAMETER/2);
			setCenterY(CIRCLE_DIAMETER/2);
		}

	}



	@Override
	public void initialize(URL location, ResourceBundle resources) {



	}
}
